1) When would you want to use a remote repository rather than keeping all your work local?

There are two reasons for having a remote repository, either of which may be valid in their own right.
The first is if I want to share the repository with someone else.  Although this could be accomplished 
via e-mail, a remote location accessible by both is much easier to maintain.  The second reason it that
this also creates a full backup of the repository, should something happen locally.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It's not necessarily true that you want to merge the changes at any particular time.  Manual gives more control
over the process.  If it's wrong, it's on me, not the tool.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork - Similar to a branch, except it's the entire repository.  This also does not have a direct tie back to the original repository.
  Use this when the original owner of the repository is not interested in your changes (or you would be a contributor)

Clone - Copies the original repository and maintains a direct link back to it via remotes. Use this when you want to be able to push/pull
  with the original repository.

Branches - In a given repository, this creates a new path for development.  Perhaps to add a feature that is intended to be merged
   back into the master.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

This allows work to proceed when not able to connect to the remote location while maintaining a full history.

5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git or GitHub, a lot of the merging becomes a manual exercise.  Not only would I have to find every difference, but the merges would
have to be done in a manual manner (e.g. copy/paste

6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

You should almost never make changes directly to master.  Master should be kept in such a way that the tip is never broken.  The advantage
to making changes in the master is that it's very simple to do, and requires less knowledge of how to use Git.
